#!/usr/bin/env python
# coding: utf-8

# # Исследование надежности заемщиков
# 

# Во второй части проекта вы выполните шаги 3 и 4. Их вручную проверит ревьюер.
# Чтобы вам не пришлось писать код заново для шагов 1 и 2, мы добавили авторские решения в ячейки с кодом. 
# 
# 

# ## Откройте таблицу и изучите общую информацию о данных

# **Задание 1. Импортируйте библиотеку pandas. Считайте данные из csv-файла в датафрейм и сохраните в переменную `data`. Путь к файлу:**
# 
# `/datasets/data.csv`

# In[32]:


import pandas as pd

try:
    data = pd.read_csv('/datasets/data.csv')
except:
    data = pd.read_csv('https://code.s3.yandex.net/datasets/data.csv')


# **Задание 2. Выведите первые 20 строчек датафрейма `data` на экран.**

# In[33]:


data.head(20)


# **Задание 3. Выведите основную информацию о датафрейме с помощью метода `info()`.**

# In[34]:


data.info()


# ## Предобработка данных

# ### Удаление пропусков

# **Задание 4. Выведите количество пропущенных значений для каждого столбца. Используйте комбинацию двух методов.**

# In[35]:


data.isna().sum()


# **Задание 5. В двух столбцах есть пропущенные значения. Один из них — `days_employed`. Пропуски в этом столбце вы обработаете на следующем этапе. Другой столбец с пропущенными значениями — `total_income` — хранит данные о доходах. На сумму дохода сильнее всего влияет тип занятости, поэтому заполнить пропуски в этом столбце нужно медианным значением по каждому типу из столбца `income_type`. Например, у человека с типом занятости `сотрудник` пропуск в столбце `total_income` должен быть заполнен медианным доходом среди всех записей с тем же типом.**

# In[36]:


for t in data['income_type'].unique():
    data.loc[(data['income_type'] == t) & (data['total_income'].isna()), 'total_income'] =     data.loc[(data['income_type'] == t), 'total_income'].median()


# ### Обработка аномальных значений

# **Задание 6. В данных могут встречаться артефакты (аномалии) — значения, которые не отражают действительность и появились по какой-то ошибке. таким артефактом будет отрицательное количество дней трудового стажа в столбце `days_employed`. Для реальных данных это нормально. Обработайте значения в этом столбце: замените все отрицательные значения положительными с помощью метода `abs()`.**

# In[37]:


data['days_employed'] = data['days_employed'].abs()


# **Задание 7. Для каждого типа занятости выведите медианное значение трудового стажа `days_employed` в днях.**

# In[38]:


data.groupby('income_type')['days_employed'].agg('median')


# У двух типов (безработные и пенсионеры) получатся аномально большие значения. Исправить такие значения сложно, поэтому оставьте их как есть. Тем более этот столбец не понадобится вам для исследования.

# **Задание 8. Выведите перечень уникальных значений столбца `children`.**

# In[39]:


data['children'].unique()


# **Задание 9. В столбце `children` есть два аномальных значения. Удалите строки, в которых встречаются такие аномальные значения из датафрейма `data`.**

# In[40]:


data = data[(data['children'] != -1) & (data['children'] != 20)]


# **Задание 10. Ещё раз выведите перечень уникальных значений столбца `children`, чтобы убедиться, что артефакты удалены.**

# In[41]:


data['children'].unique()


# ### Удаление пропусков (продолжение)

# **Задание 11. Заполните пропуски в столбце `days_employed` медианными значениями по каждого типа занятости `income_type`.**

# In[42]:


for t in data['income_type'].unique():
    data.loc[(data['income_type'] == t) & (data['days_employed'].isna()), 'days_employed'] =     data.loc[(data['income_type'] == t), 'days_employed'].median()


# **Задание 12. Убедитесь, что все пропуски заполнены. Проверьте себя и ещё раз выведите количество пропущенных значений для каждого столбца с помощью двух методов.**

# In[43]:


data.isna().sum()


# ### Изменение типов данных

# **Задание 13. Замените вещественный тип данных в столбце `total_income` на целочисленный с помощью метода `astype()`.**

# In[44]:


data['total_income'] = data['total_income'].astype(int)


# ### Обработка дубликатов

# **Задание 14. Обработайте неявные дубликаты в столбце `education`. В этом столбце есть одни и те же значения, но записанные по-разному: с использованием заглавных и строчных букв. Приведите их к нижнему регистру. Проверьте остальные столбцы.**

# In[45]:


data['education'] = data['education'].str.lower()


# **Задание 15. Выведите на экран количество строк-дубликатов в данных. Если такие строки присутствуют, удалите их.**

# In[46]:


data.duplicated().sum()


# In[47]:


data = data.drop_duplicates()


# ### Категоризация данных

# **Задание 16. На основании диапазонов, указанных ниже, создайте в датафрейме `data` столбец `total_income_category` с категориями:**
# 
# - 0–30000 — `'E'`;
# - 30001–50000 — `'D'`;
# - 50001–200000 — `'C'`;
# - 200001–1000000 — `'B'`;
# - 1000001 и выше — `'A'`.
# 
# 
# **Например, кредитополучателю с доходом 25000 нужно назначить категорию `'E'`, а клиенту, получающему 235000, — `'B'`. Используйте собственную функцию с именем `categorize_income()` и метод `apply()`.**

# In[48]:


def categorize_income(income):
    try:
        if 0 <= income <= 30000:
            return 'E'
        elif 30001 <= income <= 50000:
            return 'D'
        elif 50001 <= income <= 200000:
            return 'C'
        elif 200001 <= income <= 1000000:
            return 'B'
        elif income >= 1000001:
            return 'A'
    except:
        pass


# In[49]:


data['total_income_category'] = data['total_income'].apply(categorize_income)


# **Задание 17. Выведите на экран перечень уникальных целей взятия кредита из столбца `purpose`.**

# In[50]:


data['purpose'].unique()


# **Задание 18. Создайте функцию, которая на основании данных из столбца `purpose` сформирует новый столбец `purpose_category`, в который войдут следующие категории:**
# 
# - `'операции с автомобилем'`,
# - `'операции с недвижимостью'`,
# - `'проведение свадьбы'`,
# - `'получение образования'`.
# 
# **Например, если в столбце `purpose` находится подстрока `'на покупку автомобиля'`, то в столбце `purpose_category` должна появиться строка `'операции с автомобилем'`.**
# 
# **Используйте собственную функцию с именем `categorize_purpose()` и метод `apply()`. Изучите данные в столбце `purpose` и определите, какие подстроки помогут вам правильно определить категорию.**

# In[51]:


def categorize_purpose(row):
    try:
        if 'автом' in row:
            return 'операции с автомобилем'
        elif 'жил' in row or 'недвиж' in row:
            return 'операции с недвижимостью'
        elif 'свад' in row:
            return 'проведение свадьбы'
        elif 'образов' in row:
            return 'получение образования'
    except:
        return 'нет категории'


# In[52]:


data['purpose_category'] = data['purpose'].apply(categorize_purpose)


# ### Шаг 3. Исследуйте данные и ответьте на вопросы

# #### 3.1 Есть ли зависимость между количеством детей и возвратом кредита в срок?

# In[133]:





def ets(category):
    debt = data.groupby(category).agg({'debt':['count','sum']})
    
    quality_num = debt['debt']['sum']/debt['debt']['count']*100
    

    data_pivot=data.pivot_table(index=category, values = 'debt', aggfunc=['count', 'sum'])

    data_pivot.columns=['количество заемщиков (кредитов)', 'всего должников'] 
    data_pivot['средний процент просрочки'] = quality_num
    

    display(data_pivot)

ets('children')


# **Вывод:** Зависимости между количеством детей и возвратом кредита в срок нет, есть зависимость в количестве кредитов чем больше детей тем меньше берут кредитов. У кого детей нет вероятность вернуть кредит в срок выше скорее всего это связано с дополнительными тратами на детей. Включать в аналитику тех у кого 5 детей считаю не нужно так как на них приходится всего 9 кредитов по этому для вывода очень мало исходных данных.  

# #### 3.2 Есть ли зависимость между семейным положением и возвратом кредита в срок?

# In[135]:


family_debt=data.groupby('family_status').agg({'debt':['count','sum']}) # Ваш код будет здесь. Вы можете создавать новые ячейки.
display(family_debt)
print()
family_quality=family_debt['debt']['sum']/family_debt['debt']['count']
display(family_quality.sort_values(ascending=False))

ets('family_status')


# **Вывод:** Зависимость между семейным положением и возвратом кредита в срок есть, тот кто находится в данный момент времени или выл в недавнем времени в законных отношениях с большей вероятностью отдадут кредит вовремя  

# #### 3.3 Есть ли зависимость между уровнем дохода и возвратом кредита в срок?

# In[136]:


total_income_debt=data.groupby('total_income_category').agg({'debt':['count','sum']}) 
display(total_income_debt)
print()
total_income_quality=total_income_debt['debt']['sum']/total_income_debt['debt']['count']
display(total_income_quality.sort_values(ascending=False))

ets('total_income_category')


# **Вывод:** чаще всего возвращают кредит в срок люди с доходом выше среднего(от 200.000 до 1.000.000)

# #### 3.4 Как разные цели кредита влияют на его возврат в срок?

# In[137]:


purpose_category_debt=data.groupby('purpose_category').agg({'debt':['count','sum']}) 
display(purpose_category_debt)
print()
purpose_category_quality=purpose_category_debt['debt']['sum']/purpose_category_debt['debt']['count']
display(purpose_category_quality.sort_values(ascending=False))# Ваш код будет здесь. Вы можете создавать новые ячейки.

ets('purpose_category')


# **Вывод:** на операции с автомобилем и образование приходится самое большое количество просрочек по кредитам. на свадьбы и недвижимость приходится наименьшее количество просрочек кредитов. Скорее всего клиенты долго готовятся к свадьбе или приобретению недвижимости и лучше расчитывают свои возможности.

# #### 3.5 Приведите возможные причины появления пропусков в исходных данных.

# *Ответ:* причины могут быть технические( сбой в работе программы или оборудования), или человеческий фактор( ошибки при заполнении данных или умышленное не заполнение каких либо данных)

# #### 3.6 Объясните, почему заполнить пропуски медианным значением — лучшее решение для количественных переменных.

# *Ответ:*  Заполнить пропуски медианным значением — лучшее решение для количественных переменных, потому что в количественных данных часто встречаются аномальные значения(очень высокие или очень маленькие) и среднее значение будет некоректно отображать данные.

# ### Шаг 4: общий вывод.

# Напишите ваш общий вывод.
# 1 Зависимости между количеством детей и возвратом кредита в срок нет, есть зависимость в количестве кредитов чем больше детей тем меньше берут кредитов. У кого детей нет вероятность вернуть кредит в срок выше скорее всего это связано с дополнительными тратами на детей.
# 2 Зависимость между семейным положением и возвратом кредита в срок есть, тот кто находится в данный момент времени или был в недавнем времени в законных отношениях с большей вероятностью отдадут кредит вовремя.
# 3 Чаще всего возвращают кредит в срок люди с доходом выше среднего(от 200.000 до 1.000.000)
# 4 На операции с автомобилем и образование приходится самое большое количество просрочек по кредитам. На свадьбы и недвижимость приходится наименьшее количество просрочек кредитов.
# 
# Самыми надежными заемщиками выступают клиенты с доходом выше среднего, находящиеся в официальном браке или бывшие в нем до недавнего времени берущие заём на недвижимость
